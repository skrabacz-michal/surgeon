def buildVersionName = file('./version_name').getText()
def buildVersionCode = file('./version_code').getText().toInteger()

apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.library'

buildscript
{
    repositories
    {
        mavenCentral()
    }
    dependencies
    {
        classpath 'com.android.tools.build:gradle:0.12.+'
        classpath 'com.jakewharton.sdkmanager:gradle-plugin:0.10.+'
    }
}

allprojects {
    repositories {
        mavenCentral()
    }
}

android {
    compileSdkVersion 19
    buildToolsVersion '20.0.0'

    publishNonDefault true

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 19
        versionCode buildVersionCode
        versionName buildVersionName
    }

    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
}

android.libraryVariants.all { variant ->
    task("genJavadoc${variant.name}", type: Javadoc) {
        title = "$name $version API"
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar ="${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        options.links("http://docs.oracle.com/javase/7/docs/api/");
        options.linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference");
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
        exclude '**/internal/**'
        exclude '**/services/**'
    }
}